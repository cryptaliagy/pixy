name: Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PACKAGE_NAME: pixy
  VERSION: "0.2.2"

on:
  workflow_dispatch:

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run the security audit check
        run: cargo audit
  build-binary:
    strategy:
      fail-fast: true
      matrix:
        architecture:
          - target: "x86_64-unknown-linux-musl"
            name: "amd64"
          - target: "aarch64-unknown-linux-musl"
            name: "arm64"
          - target: "armv7-unknown-linux-musleabi"
            name: "armv7"
          - target: "armv7-unknown-linux-musleabihf"
            name: "armv7hf"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-test-${{ matrix.architecture.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-binstall
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install cross
        run: cargo binstall -y cross

      - name: Run the tests
        run: cross test --target ${{ matrix.architecture.target }} --release

      - name: Build the binary for the target
        run: cross build --target ${{ matrix.architecture.target }} --release -p ${{ env.PACKAGE_NAME }}

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Build the deb package for the target
        run: cargo deb --target ${{ matrix.architecture.target }} --no-build --no-strip -p ${{ env.PACKAGE_NAME }}

      - name: Create output directory
        run: mkdir ./output

      - name: Rename binary to use correct extension and move to output directory
        run: |
          mv target/${{ matrix.architecture.target }}/release/${{ env.PACKAGE_NAME }} \
            ./output/${{ env.PACKAGE_NAME }}.${{ matrix.architecture.name }}
          mv target/${{ matrix.architecture.target }}/debian/${{ env.PACKAGE_NAME}}*.deb ./output/

      - name: Upload the deb package & binary as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: pixy-drop
          path: |
            ./output/*

  release-container:
    needs:
      - build-binary
      - audit
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the container
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

  release-binary:
    needs:
      - build-binary
      - audit
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Pull artifacts from artifact store
        uses: actions/download-artifact@v4
        with:
          name: pixy-drop
          path: ./release

      - name: Publish a draft release to GitHub
        run: |
          gh release create --repo ${{ github.repository }} --draft \
            -n "Latest version of ${{ env.PACKAGE_NAME }}" \
            -t "${{ env.PACKAGE_NAME }} v${{ env.VERSION }}" \
            ${{ env.VERSION }} ./release/*
        env:
          GH_TOKEN: ${{ github.token }}

  release-cargo:
    needs:
      - release-binary
      - release-container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Publish pixy-core
        run: cargo publish -p pixy-core --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Set pixy-core version in pixy-server
        run: cargo add pixy-core@${{ env.VERSION }} -p pixy-server

      - name: Publish pixy-server
        run: cargo publish -p pixy-server --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Set pixy-core version in pixy
        run: cargo add pixy-core@${{ env.VERSION }} -p pixy

      - name: Set pixy-server version in pixy
        run: cargo add pixy-server@${{ env.VERSION }} -p pixy

      - name: Publish pixy
        run: cargo publish -p pixy --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
